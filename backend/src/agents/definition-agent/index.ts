import { DefinitionResultType } from './schemas';import * as fs from 'fs';import * as path from 'path';import { generativeAIService } from '../../services/ai';import { getDictionaryDefinition } from '../../services/dictionaryService';const promptPath = path.join(__dirname, 'prompt.md');const promptContent = fs.readFileSync(promptPath, 'utf-8');// A simple regex to extract the word to be defined from the prompt.const wordExtractionRegex = /word: (\w+)/i;const getDefinition = async (prompt: string): Promise<DefinitionResultType> => {  const resultText = await generativeAIService.generateText({ prompt, systemPrompt: promptContent });  let definitionResult;  try {    const jsonMatch = resultText.match(/```json\n([\s\S]*?)\n```/);    let jsonString = resultText;    if (jsonMatch && jsonMatch[1]) {      jsonString = jsonMatch[1];    }    definitionResult = JSON.parse(jsonString);  } catch (e) {    console.error('Failed to parse definition result from AI service.', e);    definitionResult = { definition: '' };  }  const wordMatch = prompt.match(wordExtractionRegex);  if (wordMatch && wordMatch[1]) {    const word = wordMatch[1];    const dictionaryData = await getDictionaryDefinition(word);    if (dictionaryData) {      definitionResult.dictionary = dictionaryData;      // If the AI didn't provide a phonetic, try to get it from the dictionary      if (!definitionResult.phonetic) {        const firstPhonetic = dictionaryData[0]?.phonetics?.find(p => p.text);        if (firstPhonetic && firstPhonetic.text) {          definitionResult.phonetic = firstPhonetic.text;        }      }    }  }  return definitionResult;};export { getDefinition };